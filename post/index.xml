<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 4679&#39;s Blog</title>
    <link>https://4679.space/post/</link>
    <description>Recent content in Posts on 4679&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 06 Apr 2016 14:55:00 +0800</lastBuildDate>
    <atom:link href="https://4679.space/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>记一次拿下一台朝鲜服务器</title>
      <link>https://4679.space/hack/</link>
      <pubDate>Wed, 06 Apr 2016 14:55:00 +0800</pubDate>
      
      <guid>https://4679.space/hack/</guid>
      <description>&lt;p&gt;昨晚在V2ex看到&lt;a href=&#34;https://www.v2ex.com/t/268389&#34;&gt;一篇帖子&lt;/a&gt; 当时我就震惊了&lt;/p&gt;

&lt;p&gt;然后我就看到了楼主发的ip段 我就决定自己动手玩玩&lt;/p&gt;

&lt;p&gt;楼主提到了他开启了3389端口 我就以这个为目标开始扫描&lt;/p&gt;

&lt;p&gt;我用到的端口扫描工具是&lt;a href=&#34;https://github.com/robertdavidgraham/masscan&#34;&gt;masscan&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;masscan 175.45.176.0/24 -p3389
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有结果了 直接访问扫出来的ip 看到了老版本的XAMPP&lt;/p&gt;

&lt;p&gt;查看phpinfo页面 看到了文件实际地址&lt;/p&gt;

&lt;p&gt;之后进入phpmyadmin 一句话webshell 开启telnet 修改admin密码 开启3389 拿下&lt;/p&gt;

&lt;p&gt;三胖会不会用大浦洞轰我呢😊&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>换域名了</title>
      <link>https://4679.space/domain-changed/</link>
      <pubDate>Tue, 05 Apr 2016 15:08:00 +0800</pubDate>
      
      <guid>https://4679.space/domain-changed/</guid>
      <description>&lt;p&gt;&amp;ndash;之前用的.space太小众 正好今天看到了name.com首年免费的消息 吓得我立马注册了个.com的&amp;ndash;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-4679kun.qbox.me/ac-haipa.png?imageView2/2/q/85/format/jpg&#34; alt=&#34;害怕&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;ndash;之前的4679.space直接301过来了 评论用disqus的工具迁移了&amp;ndash;&lt;/p&gt;

&lt;p&gt;淦你娘的name.com 把我账号关了 说我滥用 玩不起就不要玩 一生黑&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在Android上使用Linux图形界面</title>
      <link>https://4679.space/linux-deploy/</link>
      <pubDate>Sat, 26 Mar 2016 18:58:03 +0800</pubDate>
      
      <guid>https://4679.space/linux-deploy/</guid>
      <description>&lt;p&gt;先上几张图
&lt;img src=&#34;https://dn-4679kun.qbox.me/linux_deploy%2F1.png?imageView2/2/q/85/format/jpg&#34; alt=&#34;XServer XSDL&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-4679kun.qbox.me/linux_deploy%2F2.png?imageView2/2/q/85/format/jpg&#34; alt=&#34;i3wm&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-4679kun.qbox.me/linux_deploy%2F3.png?imageView2/2/q/85/format/jpg&#34; alt=&#34;vim&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-4679kun.qbox.me/linux_deploy%2F4.png?imageView2/2/q/85/format/jpg&#34; alt=&#34;mc&#34; /&gt;&lt;/p&gt;

&lt;p&gt;具体步骤呢&lt;/p&gt;

&lt;p&gt;1.先用&lt;a href=&#34;http://www.coolapk.com/apk/ru.meefik.linuxdeploy&#34;&gt;Linux Deploy&lt;/a&gt;安装好系统,这个很简单,装好Busybox,在设置里选好选项一键安装就行&lt;/p&gt;

&lt;p&gt;2.安装好&lt;a href=&#34;https://play.google.com/store/apps/details?id=x.org.server&#34;&gt;XServer XSDL&lt;/a&gt;,Android上的X服务器,效率比用VNC好多了&lt;/p&gt;

&lt;p&gt;3.通过ssh连接到装好的系统,客户端我推荐&lt;a href=&#34;http://www.coolapk.com/apk/com.sonelli.juicessh&#34;&gt;JuiceSSH&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.安装好你要使用的桌面,我选择的是i3wm&lt;/p&gt;

&lt;p&gt;5.打开XServer XSDL,配置好分辨率和字体缩放,分辨率我选的原生,字体缩放0.5x,然后就会看到图1的界面了&lt;/p&gt;

&lt;p&gt;6.进入终端,输入 export DISPLAY=:0 PULSE_SERVER=tcp:127.0.0.1:4712&lt;/p&gt;

&lt;p&gt;7.启动桌面,比如我用i3就输入i3wm,xfce就是startxfce,lxde就是startlxde,等等&lt;/p&gt;

&lt;p&gt;8.切换回XServer XSDL,不出意外的话你就能看到桌面了,随意折腾吧～&lt;/p&gt;

&lt;p&gt;PS:图中i3的配置来自于&lt;a href=&#34;https://github.com/ID1258/oh-my-i3&#34;&gt;oh-my-i3&lt;/a&gt;,很好看,赞一个&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>博客启用Certificate Transparency</title>
      <link>https://4679.space/certificate-transparency/</link>
      <pubDate>Tue, 01 Mar 2016 08:59:03 +0800</pubDate>
      
      <guid>https://4679.space/certificate-transparency/</guid>
      <description>&lt;p&gt;谷歌爸爸的东西 当然要兹磁啦&lt;/p&gt;

&lt;p&gt;参考了这两篇文章&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.eqoe.cn/posts/enable-certificate-transparency-for-nginx.html&#34;&gt;为 SSL 站点启用 Certificate Transparency 功能&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://imququ.com/post/certificate-transparency.html&#34;&gt;Certificate Transparency 那些事&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;你们现在看到的服务器信息应该是这样&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-4679kun.qbox.me/ct%2FScreenshot_20160301-090031.png?imageView2/2/q/85/format/jpg&#34; alt=&#34;info&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这是我用的服务端 &lt;a href=&#34;https://aur.archlinux.org/packages/nginx-mainline-mod4679/&#34;&gt;nginx-mainline-mod4679&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;nginx+OpenSSL(Cloudflare的补丁)+google反代模块+Certificate Transparency模块&lt;/p&gt;

&lt;p&gt;另外婊一下cloudflare在国内的速度 现在直连比之前走cloudflare快多了&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>搭建了个Google反向代理</title>
      <link>https://4679.space/google-mirror/</link>
      <pubDate>Fri, 29 Jan 2016 16:44:45 +0800</pubDate>
      
      <guid>https://4679.space/google-mirror/</guid>
      <description>

&lt;h2 id=&#34;https-g-4679-space-https-g-4679-space:c3369eeade5e82ad1fc1259002c00e4c&#34;&gt;&lt;a href=&#34;https://g.4679.space&#34;&gt;https://g.4679.space&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;用到了wen.lu提供的&lt;a href=&#34;https://github.com/cuber/ngx_http_google_filter_module&#34;&gt;ngx_http_google_filter_module&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;为了方便安装 我写了个PKGBUILD放在aur上 Arch用户可以直接安装 &lt;a href=&#34;https://aur.archlinux.org/packages/nginx-mainline-boringssl-google_fliter/&#34;&gt;nginx-mainline-boringssl-google_fliter&lt;/a&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;这个坑弃了 新的服务端 &lt;a href=&#34;https://aur.archlinux.org/packages/nginx-mainline-mod4679/&#34;&gt;nginx-mainline-mod4679&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cuber/ngx_http_google_filter_module/blob/master/README.zh-CN.md&#34;&gt;配置文档在这&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>博客复活了</title>
      <link>https://4679.space/blog-reborn/</link>
      <pubDate>Tue, 26 Jan 2016 19:28:45 +0800</pubDate>
      
      <guid>https://4679.space/blog-reborn/</guid>
      <description>&lt;p&gt;前几天上VPS 发现我Hugo的文件夹不见了&lt;/p&gt;

&lt;p&gt;当时我就懵逼了 还好文章的源文件都在github&lt;/p&gt;

&lt;p&gt;于是在和拖延症搏斗了几天后 就有了你们现在看到的这个博客&lt;/p&gt;

&lt;p&gt;顺便换了个主题 因为之前主题的配置文件一起不见了&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>oh my termux</title>
      <link>https://4679.space/oh-my-termux/</link>
      <pubDate>Fri, 08 Jan 2016 19:23:15 +0800</pubDate>
      
      <guid>https://4679.space/oh-my-termux/</guid>
      <description>&lt;p&gt;Termux是安卓上的一款软件 能提供一个差不多能用的linux环境 值得一提的是 它带有包管理器apt 常用的软件包差不多都有
我写了个快速配置Termux的脚本 &lt;a href=&#34;https://github.com/4679/oh-my-termux&#34;&gt;oh-my-termux&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>干掉安卓烦人的 存储空间不足 的通知</title>
      <link>https://4679.space/storage-space-running-out/</link>
      <pubDate>Tue, 22 Dec 2015 18:32:31 +0800</pubDate>
      
      <guid>https://4679.space/storage-space-running-out/</guid>
      <description>&lt;p&gt;这个通知真是太烦人了 于是干掉他&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;需要ROOT权限&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;安卓5.x及以下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;下载SQLite编辑器&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt; 打开 /data/data/com.android.providers.settings/databases/settings.db
 打开 secure
 编辑 sys_storage_threshold_percentage的值 改为0
 重启
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安卓6.x&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;下载终端模拟器 或者直接用adb shell&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  执行
  su
  settings put global sys_storage_threshold_percentage 0
  重启
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;原理就是 这个值控制空间不足多少时提示空间不足 默认是10 也就是空间不足10%的时候提示 把它修改成0 就没有提示了&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一份简洁 优雅的vim配置</title>
      <link>https://4679.space/vimrc/</link>
      <pubDate>Mon, 21 Dec 2015 19:16:05 +0800</pubDate>
      
      <guid>https://4679.space/vimrc/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/4679/vimrc/&#34;&gt;点我&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;用心感受&lt;/p&gt;

&lt;p&gt;如丝般顺滑 开箱即用 遵循KISS原则&lt;/p&gt;

&lt;h1 id=&#34;2016-01-07:6e3493201cd227efae8e14e2c52261e7&#34;&gt;2016-01-07&lt;/h1&gt;

&lt;p&gt;更新了 这次绝对不坑爹&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>迁移到Hugo</title>
      <link>https://4679.space/move-to-hugo/</link>
      <pubDate>Mon, 21 Dec 2015 18:30:19 +0800</pubDate>
      
      <guid>https://4679.space/move-to-hugo/</guid>
      <description>&lt;p&gt;第二次迁移博客了 这次迁移到了Hugo 一款用go语言编写的静态博客生成器 优点是效率比Hexo高太多 之前每次生成博客需要两三秒 现在只用1秒不到 不过目前还没有用于Hexo的迁移方案 全是我手动迁移的 累死了(´_ゝ`)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>利用sslh在同一个端口运行nginx openvpn xmpp ssh等服务</title>
      <link>https://4679.space/sslh/</link>
      <pubDate>Wed, 16 Dec 2015 21:29:18 +0800</pubDate>
      
      <guid>https://4679.space/sslh/</guid>
      <description>&lt;p&gt;这有什么用呢？ 某些运营商或者学校可能屏蔽了一些服务的默认端口 比如屏蔽了22端口 你就只能把ssh的监听端口改成其他的 要是更变态 开启了白名单模式呢 那样就只能通过某些端口访问了 443就是其中一个 正常人一般不会屏蔽它 但是如果通过22端口访问vps的话 启用了TLS的http服务器怎么办呢 这时候就要用到sslh了
  sslh的原理很简单 通过分析数据包的特征辨别是什么协议的访问 把对同一端口不同协议的访问分流到不同的端口上&lt;/p&gt;

&lt;p&gt;首先是安装
对于Archlinux用户&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yaourt -S sslh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通用方法 (我没测试)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#首先安装依赖
#Debian
apt-get install -y libwrap0-dev libconfig8-dev
#RPM系
yum install libconfig libconfig-devel

#获取源码
git clone https://github.com/yrutschle/sslh
cd sslh

#编译
make

#安装（Debian）
make install
cp scripts/etc.init.d.sslh /etc/init.d/sslh
update-rc.d sslh defaults

#安装（CentOS）
make install
cp scripts/etc.rc.d.init.d.sslh.centos /etc/rc.d/init.d/sslh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后修改位于/etc/sslh.conf或者/etc/sslh.cfg的配置文件
以下是我的 也是Arch的默认配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cfg&#34;&gt;# Default Arch configuration
# You can find more examples in /usr/share/doc/sslh

verbose: false;
foreground: true;
inetd: false;
numeric: false;
transparent: false;
timeout: 2;
user: &amp;quot;sslh&amp;quot;;
pidfile: &amp;quot;/run/sslh.pid&amp;quot;;


listen:
(
    { host: &amp;quot;::0&amp;quot;; port: &amp;quot;443&amp;quot;; }
);

protocols:
(
     { name: &amp;quot;ssh&amp;quot;; service: &amp;quot;ssh&amp;quot;; host: &amp;quot;localhost&amp;quot;; port: &amp;quot;22&amp;quot;; probe: &amp;quot;builtin&amp;quot;; },
     { name: &amp;quot;http&amp;quot;; host: &amp;quot;localhost&amp;quot;; port: &amp;quot;80&amp;quot;; probe: &amp;quot;builtin&amp;quot;; },     { name: &amp;quot;ssl&amp;quot;; host: &amp;quot;localhost&amp;quot;; port: &amp;quot;8443&amp;quot;; probe: &amp;quot;builtin&amp;quot;; },
     { name: &amp;quot;anyprot&amp;quot;; host: &amp;quot;localhost&amp;quot;; port: &amp;quot;8443&amp;quot;; probe: &amp;quot;builtin&amp;quot;; }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后 把占用了443端口的服务的监听端口改到8443 或者配置文件里定义的地址&lt;/p&gt;

&lt;p&gt;然后启动sslh&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#Archlinux
systemctl start sslh-fork

#Debian
service sslh start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后测试一下通过443端口来进行ssh连接&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh 127.0.0.1 -p 443
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没问题的话就成功了&lt;/p&gt;

&lt;p&gt;之后就可以禁止从外网访问22端口来提高安全性啦
标题中的openvpn xmpp也可以 按照格式添加进配置文件就行&lt;/p&gt;

&lt;p&gt;PS:我一开始其实在想 shadowsocks能不能用 后来想到 shadowsocks能不被gfw封杀 其中一个原因不就是因为没有流量特征吗 所以sslh是不能识别ss的流量的&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用阿里云的免费主机转发任意端口</title>
      <link>https://4679.space/port-forwarding/</link>
      <pubDate>Wed, 09 Dec 2015 18:51:30 +0800</pubDate>
      
      <guid>https://4679.space/port-forwarding/</guid>
      <description>&lt;p&gt;上次用了阿里云的免费主机转发了SS 其实转发任何端口都是可以的 这次就以SSH的默认端口22来做示范&lt;/p&gt;

&lt;p&gt;首先 来到TAE的控制台
&lt;img src=&#34;https://dn-4679kun.qbox.me/port/Screenshot_20151209-182822.png?imageView2/2/q/85/format/jpg&#34; alt=&#34;1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;点击配置管理
&lt;img src=&#34;https://dn-4679kun.qbox.me/port/Screenshot_20151209-182847.png?imageView2/2/q/85/format/jpg&#34; alt=&#34;2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;添加一个端口 最好访问端口和监听端口保持一致 然后记住它 （别用22 因为已经被占用了） 会提示重启 报错也没关系 手动点击重启就行&lt;/p&gt;

&lt;p&gt;之后进入WebSSH&lt;/p&gt;

&lt;p&gt;我们用到的软件是rinetd 简单好用&lt;/p&gt;

&lt;p&gt;首先安装一个screen 这样才能保证WebSSH关闭之后rinetd的进程不被杀死&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install screen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后下载解压编译rinetd&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget http://www.boutell.com/rinetd/http/rinetd.tar.gz
tar zxvf rinetd.tar.gz
cd rinetd
make
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编辑配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vim /etc/rinetd.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vim的用法我就不说了 网上都有&lt;/p&gt;

&lt;p&gt;填入&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cfg&#34;&gt;0.0.0.0 刚才添加的端口号 VPS的IP 22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后开启screen 启动rinetd&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;screen
rinetd -c /etc/rinetd.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就完成了 ssh连接vps的时候 IP和端口都用刚才才在配置管理里面看到的就行&lt;/p&gt;

&lt;p&gt;重启之后 之前开启的SS转发也被关了 再开启一遍就行&lt;/p&gt;

&lt;p&gt;这个方法可以用于转发任何端口&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>给博客做了个镜像</title>
      <link>https://4679.space/mirror/</link>
      <pubDate>Wed, 09 Dec 2015 15:56:05 +0800</pubDate>
      
      <guid>https://4679.space/mirror/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://borderland.me&#34;&gt;&amp;mdash;&amp;mdash;&amp;ndash;这里&amp;mdash;&amp;mdash;&amp;ndash;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;放在github 速度应该还不错
要是vps抽风的话 就访问这个吧&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>服务器后端切换到H2O</title>
      <link>https://4679.space/h2o/</link>
      <pubDate>Sat, 05 Dec 2015 12:20:53 +0800</pubDate>
      
      <guid>https://4679.space/h2o/</guid>
      <description>&lt;p&gt;H2O是一款轻量 配置简单的HTTP服务器 特色就是HTTP/2&lt;/p&gt;

&lt;p&gt;Archlinux用户直接从AUR安装就可以了
其他系统请自行寻找源或者编译安装&lt;/p&gt;

&lt;p&gt;下面是我的配置文件 可以当个示范&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-YAML&#34;&gt;access-log: /dev/null 
error-log: /dev/null 
pid-file: /var/run/h2o.pid
max-connections: 51200
file.send-gzip: ON 
tcp-fastopen: 3 
user: www
http2-reprioritize-blocking-assets: ON 
file.index: [ &#39;index.php&#39;, &#39;index.html&#39; ]
file.mime.addtypes: 
    text/html: .html .htm .shtml
    text/css: .css
    text/xml: .xml
    image/gif: .gif
    image/jpeg: .jpeg .jpg
    application/javascript: .js
    application/atom+xml: .atom
    application/rss+xml: .rss

    text/mathml: .mml
    text/plain: .txt
    text/vnd.sun.j2me.app-descriptor: .jad
    text/vnd.wap.wml: .wml
    text/x-component: .htc

    image/png: .png
    image/tiff: .tif .tiff
    image/vnd.wap.wbmp: .wbmp
    image/x-icon: .ico
    image/x-jng: .jng
    image/x-ms-bmp: .bmp
    image/svg+xml: .svg .svgz
    image/webp: .webp

    application/font-woff: .woff
    application/java-archive: .jar .war .ear
    application/json: .json
    application/mac-binhex40: .hqx
    application/msword: .doc
    application/pdf: .pdf
    application/postscript: .ps .eps .ai
    application/rtf: .rtf
    application/vnd.apple.mpegurl: .m3u8
    application/vnd.ms-excel: .xls
    application/vnd.ms-fontobject: .eot
    application/vnd.ms-powerpoint: .ppt
    application/vnd.wap.wmlc: .wmlc
    application/vnd.google-earth.kml+xml: .kml
    application/vnd.google-earth.kmz: .kmz
    application/x-7z-compressed: .7z
    application/x-cocoa: .cco
    application/x-java-archive-diff: .jardiff
    application/x-java-jnlp-file: .jnlp
    application/x-makeself: .run
    application/x-perl: .pl .pm
    application/x-pilot: .prc .pdb
    application/x-rar-compressed: .rar
    application/x-redhat-package-manager: .rpm
    application/x-sea: .sea
    application/x-shockwave-flash: .swf
    application/x-stuffit: .sit
    application/x-tcl: .tcl .tk
    application/x-x509-ca-cert: .der .pem .crt
    application/x-xpinstall: .xpi
    application/xhtml+xml: .xhtml
    application/xspf+xml: .xspf
    application/zip: .zip

    application/octet-stream: .bin .exe .dll
    application/octet-stream: .deb
    application/octet-stream: .dmg
    application/octet-stream: .iso .img
    application/octet-stream: .msi .msp .msm

    application/vnd.openxmlformats-officedocument.wordprocessingml.document: .docx
    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet: .xlsx
    application/vnd.openxmlformats-officedocument.presentationml.presentation: .pptx

    audio/midi: .mid .midi .kar
    audio/mpeg: .mp3
    audio/ogg: .ogg
    audio/x-m4a: .m4a
    audio/x-realaudio: .ra

    video/3gpp: .3gpp .3gp
    video/mp2t: .ts
    video/mp4: .mp4
    video/mpeg: .mpeg .mpg
    video/quicktime: .mov
    video/webm: .webm
    video/x-flv: .flv
    video/x-m4v: .m4v
    video/x-mng: .mng
    video/x-ms-asf: .asx .asf
    video/x-ms-wmv: .wmv
    video/x-msvideo: .avi

hosts:
  &amp;quot;4679.space:443&amp;quot;: 
    header.add: &amp;quot;strict-transport-security: max-age=39420000; includesubdomains; preload&amp;quot; 
    header.add: &amp;quot;X-Frame-Options: SAMEORIGIN&amp;quot;
    header.add: &amp;quot;X-Content-Type-Options: nosniff&amp;quot;
    header.add: &amp;quot;X-XSS-Protection: 1; mode=block&amp;quot;
    listen:
      port: 443
      ssl:
        certificate-file: /etc/letsencrypt/live/4679.space/fullchain.pem
        key-file: /etc/letsencrypt/live/4679.space/privkey.pem
        dh-file: /etc/ssl/certs/dhparam2048.pem
        minimum-version: TLSv1
        cipher-preference: server
        cipher-suite: CHACHA20 EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4
    paths:
      /:
        file.dir: /home/www/

  &amp;quot;4679.space:80&amp;quot;:
    listen:
      port: 80
    paths:
      /:
        redirect:
          status: 301
          url: &amp;quot;https://4679.space/&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt试用笔记</title>
      <link>https://4679.space/lets-encrypt/</link>
      <pubDate>Fri, 04 Dec 2015 13:27:52 +0800</pubDate>
      
      <guid>https://4679.space/lets-encrypt/</guid>
      <description>&lt;p&gt;昨天 也就是12月3日 Let&amp;rsquo;s Encrypt项目正式启动了Public Beta 这意味着以后每个人都能用上免费的SSL证书这实在是一件大好事 下面是我的试用体验&lt;/p&gt;

&lt;p&gt;首先 我们要获取Let&amp;rsquo;s Encrypt的客户端&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/letsencrypt/letsencrypt
cd letsencrypt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后就可以签发证书了&lt;/p&gt;

&lt;p&gt;首先 获得root权限&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;su
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后 停掉占用了80和443端口的web服务器
这里取决于各位使用的操作系统与web服务器 我用的是Archlinux+Nginx&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl stop nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就是签发证书了 （不支持泛域名）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./letsencrypt-auto -d 你的域名 certonly
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等待一阵过后 你的证书就在&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/etc/letsencrypt/live/你的域名/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;里面等着你了 赶快修改你的服务器配置文件来使用它吧&lt;/p&gt;

&lt;p&gt;最后上一张效果图
&lt;img src=&#34;https://dn-4679kun.qbox.me/Screenshot_20151204-131901.png?imageView2/2/q/85/format/jpg&#34; alt=&#34;效果图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;PS:证书的有效期是3个月 记得续签哦&lt;/p&gt;

&lt;p&gt;感谢Mozilla以及项目赞助者还有开发者们为了给我们带来更安全的互联网所做出的贡献！&lt;/p&gt;

&lt;p&gt;本文是我在午睡的时候睡不着用48元包邮的渣想BKC600蓝牙键盘写下的 手感还不错:-)
&lt;img src=&#34;https://dn-4679kun.qbox.me/IMG_20151204_132028.jpg?imageView2/2/q/85/format/jpg&#34; alt=&#34;BKC600&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>