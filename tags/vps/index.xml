<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vps on 4679&#39;s Blog</title>
    <link>https://4679.space/tags/vps/</link>
    <description>Recent content in Vps on 4679&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 16 Dec 2015 21:29:18 +0800</lastBuildDate>
    <atom:link href="https://4679.space/tags/vps/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>利用sslh在同一个端口运行nginx openvpn xmpp ssh等服务</title>
      <link>https://4679.space/sslh/</link>
      <pubDate>Wed, 16 Dec 2015 21:29:18 +0800</pubDate>
      
      <guid>https://4679.space/sslh/</guid>
      <description>&lt;p&gt;这有什么用呢？ 某些运营商或者学校可能屏蔽了一些服务的默认端口 比如屏蔽了22端口 你就只能把ssh的监听端口改成其他的 要是更变态 开启了白名单模式呢 那样就只能通过某些端口访问了 443就是其中一个 正常人一般不会屏蔽它 但是如果通过22端口访问vps的话 启用了TLS的http服务器怎么办呢 这时候就要用到sslh了
  sslh的原理很简单 通过分析数据包的特征辨别是什么协议的访问 把对同一端口不同协议的访问分流到不同的端口上&lt;/p&gt;

&lt;p&gt;首先是安装
对于Archlinux用户&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yaourt -S sslh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通用方法 (我没测试)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#首先安装依赖
#Debian
apt-get install -y libwrap0-dev libconfig8-dev
#RPM系
yum install libconfig libconfig-devel

#获取源码
git clone https://github.com/yrutschle/sslh
cd sslh

#编译
make

#安装（Debian）
make install
cp scripts/etc.init.d.sslh /etc/init.d/sslh
update-rc.d sslh defaults

#安装（CentOS）
make install
cp scripts/etc.rc.d.init.d.sslh.centos /etc/rc.d/init.d/sslh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后修改位于/etc/sslh.conf或者/etc/sslh.cfg的配置文件
以下是我的 也是Arch的默认配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cfg&#34;&gt;# Default Arch configuration
# You can find more examples in /usr/share/doc/sslh

verbose: false;
foreground: true;
inetd: false;
numeric: false;
transparent: false;
timeout: 2;
user: &amp;quot;sslh&amp;quot;;
pidfile: &amp;quot;/run/sslh.pid&amp;quot;;


listen:
(
    { host: &amp;quot;::0&amp;quot;; port: &amp;quot;443&amp;quot;; }
);

protocols:
(
     { name: &amp;quot;ssh&amp;quot;; service: &amp;quot;ssh&amp;quot;; host: &amp;quot;localhost&amp;quot;; port: &amp;quot;22&amp;quot;; probe: &amp;quot;builtin&amp;quot;; },
     { name: &amp;quot;http&amp;quot;; host: &amp;quot;localhost&amp;quot;; port: &amp;quot;80&amp;quot;; probe: &amp;quot;builtin&amp;quot;; },     { name: &amp;quot;ssl&amp;quot;; host: &amp;quot;localhost&amp;quot;; port: &amp;quot;8443&amp;quot;; probe: &amp;quot;builtin&amp;quot;; },
     { name: &amp;quot;anyprot&amp;quot;; host: &amp;quot;localhost&amp;quot;; port: &amp;quot;8443&amp;quot;; probe: &amp;quot;builtin&amp;quot;; }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后 把占用了443端口的服务的监听端口改到8443 或者配置文件里定义的地址&lt;/p&gt;

&lt;p&gt;然后启动sslh&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#Archlinux
systemctl start sslh-fork

#Debian
service sslh start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后测试一下通过443端口来进行ssh连接&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh 127.0.0.1 -p 443
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没问题的话就成功了&lt;/p&gt;

&lt;p&gt;之后就可以禁止从外网访问22端口来提高安全性啦
标题中的openvpn xmpp也可以 按照格式添加进配置文件就行&lt;/p&gt;

&lt;p&gt;PS:我一开始其实在想 shadowsocks能不能用 后来想到 shadowsocks能不被gfw封杀 其中一个原因不就是因为没有流量特征吗 所以sslh是不能识别ss的流量的&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用net-speeder缓解vps高延迟 高丢包率</title>
      <link>https://4679.space/net-speeder/</link>
      <pubDate>Fri, 04 Dec 2015 10:50:51 +0800</pubDate>
      
      <guid>https://4679.space/net-speeder/</guid>
      <description>&lt;p&gt;net-speeder是一款开源软件 能显著降低丢包率 原理简单粗暴 就是每个包发两遍 所以 使用的流量也会翻一倍 这就要靠大家取舍了&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/snooda/net-speeder&#34;&gt;项目地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首先安装依赖 libnet， libpcap&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -Sy libnet libpcap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每个发行版安装方法都不同 就不一一说明了&lt;/p&gt;

&lt;p&gt;之后就是获取源代码了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/snooda/net-speeder
cd net-speeder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后编译&lt;/p&gt;

&lt;p&gt;vps架构是openvz的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sh build.sh -DCOOKED
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vps是Xen,KVM或者是物理机的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sh build.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译完成后 就可以运行了&lt;/p&gt;

&lt;p&gt;首先获取root权限&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;su
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./net_speeder 网卡名 加速规则（bpf规则)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最简单的使用方法（对于OpenVZ）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; ./net_speeder venet0 &amp;quot;ip&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ping一下看看效果吧:-)&lt;/p&gt;

&lt;p&gt;PS:对SS也有效哦&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>自购VPS搭建Shadowsocks服务器</title>
      <link>https://4679.space/ss/</link>
      <pubDate>Thu, 05 Nov 2015 23:24:52 +0800</pubDate>
      
      <guid>https://4679.space/ss/</guid>
      <description>&lt;p&gt;好多丧尸都在求指导 我觉得还是写一篇教程比较好(=ﾟωﾟ)=&lt;/p&gt;

&lt;p&gt;首先是vps的购买 网上有很多指导挑选vps的网站 丧尸们可以挑选一款适合自己的 我用的是cheapvz的洛杉矶vps 年付75人民币 支持支付宝付款&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;单核cpu&lt;/li&gt;
&lt;li&gt;256mb内存 15G硬盘&lt;/li&gt;
&lt;li&gt;100Mbps带宽&lt;/li&gt;
&lt;li&gt;每月500G流量&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这个价格能买到这种配置也不错了 架个ss 开个小网站还是没问题的&lt;/p&gt;

&lt;p&gt;下面是购买的步骤&lt;/p&gt;

&lt;p&gt;首先麻烦丧尸们先访问一下我的推荐链接 这样你们购买了之后我还能获得一点佣金
&lt;a href=&#34;https://www.cheapvz.com/aff.php?aff=42&#34;&gt;https://www.cheapvz.com/aff.php?aff=42&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然后这是选购的链接 先把币种切换成CNY 也就是人民币 然后点击立即购买就行啦
&lt;a href=&#34;https://www.cheapvz.com/cart.php?gid=2&#34;&gt;https://www.cheapvz.com/cart.php?gid=2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;之后就是填写一些表格 这里我只对某些选项说明一下 其他的大家一看就懂
首先是
&lt;img src=&#34;https://dn-4679kun.qbox.me/2015/10/3544733802.png?imageView2/2/q/85/format/jpg&#34; alt=&#34;1.png&#34; /&gt;
第一项是服务器名 大家随便取一个就行 我的是4679-vps
第二项和第三项就填 ns1 ns2
第四项root密码 之后登录服务器的时候会用到&lt;/p&gt;

&lt;p&gt;之后是选择操作系统
&lt;img src=&#34;https://dn-4679kun.qbox.me/2015/10/3036577624.png?imageView2/2/q/85/format/jpg&#34; alt=&#34;9.png&#34; /&gt;
第二项就是选择操作系统了 我用的是ubuntu_14.04 x86_64
建议大家也选择这个 因为下文用到的一键安装脚本是用于ubuntu和debian的&lt;/p&gt;

&lt;p&gt;其他填好之后就是结账了
&lt;img src=&#34;https://dn-4679kun.qbox.me/2015/10/2193416289.png?imageView2/2/q/85/format/jpg&#34; alt=&#34;3.png&#34; /&gt;
付款完成以后
&lt;img src=&#34;https://dn-4679kun.qbox.me/2015/10/1113179179.png?imageView2/2/q/85/format/jpg&#34; alt=&#34;4.png&#34; /&gt;
稍等一会 你的邮箱里就会收到一封邮件 里面就有你的vps的ip地址啦&lt;/p&gt;

&lt;p&gt;接下来下载putty 用来连接服务器
&lt;a href=&#34;https://github.com/larryli/PuTTY/releases/download/putty-0.65cn/putty-0.65cn.zip&#34;&gt;https://github.com/larryli/PuTTY/releases/download/putty-0.65cn/putty-0.65cn.zip&lt;/a&gt;
下载完成后解压 打开putty.exe
&lt;img src=&#34;https://dn-4679kun.qbox.me/2015/10/3378522319.png?imageView2/2/q/85/format/jpg&#34; alt=&#34;5.png&#34; /&gt;
在主机名称处填入ip 然后点击打开
之后会出现一个命令行窗口 显示 login as:
输入root 回车 之后是输入刚才设定的root密码 输入的时候是没有显示的 输入完回车就行&lt;/p&gt;

&lt;p&gt;不出意外的话 就能连接上服务器了
&lt;img src=&#34;https://dn-4679kun.qbox.me/2015/10/23040430.png?imageView2/2/q/85/format/jpg&#34; alt=&#34;6.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;现在就可以安装shadowsocks了
我使用的是秋水逸冰大大的一键安装脚本 &lt;a href=&#34;https://teddysun.com/358.html&#34;&gt;原文地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首先安装依赖（复制之后点击右键就是粘贴）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get install build-essential autoconf libtool libssl-dev gawk debhelper
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输入y 确认安装&lt;/p&gt;

&lt;p&gt;然后输入第一条命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完成以后输入第二条&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x shadowsocks-libev-debian.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后是第三条&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./shadowsocks-libev-debian.sh 2&amp;gt;&amp;amp;1 | tee shadowsocks-libev-debian.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输入第三条命令以后 会提示设置ss的密码
&lt;img src=&#34;https://dn-4679kun.qbox.me/2015/10/3543099494.png?imageView2/2/q/85/format/jpg&#34; alt=&#34;7.png&#34; /&gt;
输入密码然后回车
之后是设置端口
输入要设置的端口号然后回车&lt;/p&gt;

&lt;p&gt;之后就会开始安装了
&lt;img src=&#34;https://dn-4679kun.qbox.me/2015/10/3798456288.png?imageView2/2/q/85/format/jpg&#34; alt=&#34;8.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;等待 安装完成后系统就会给出服务器的地址 端口 密码 加密方式 你就有属于自己的ss服务器了&lt;/p&gt;

&lt;p&gt;完结撒花(＾o＾)ﾉ请原谅我全程没用一个标点&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用黑魔法把任意系统的vps变成Arch</title>
      <link>https://4679.space/vps2arch/</link>
      <pubDate>Thu, 05 Nov 2015 23:19:11 +0800</pubDate>
      
      <guid>https://4679.space/vps2arch/</guid>
      <description>&lt;p&gt;作为一个有信仰的人 当然在哪都要用Arch vps也是 然而大部分vps提供商都不会有Arch这种“不稳定”的系统供我们选择 这怎么能忍
于是我找啊找 没想到真找到了办法&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/drizzt/vps2arch&#34;&gt;https://github.com/drizzt/vps2arch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;就是它 使用方法很简单&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意！这会清除vps上的所有数据&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget http://git.io/vps2arch
chmod +x vps2arch
su
./vps2arch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就这四条命令 经过一小会等待之后 安装就完成了&lt;/p&gt;

&lt;p&gt;然后配置好软件源 执行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sync ; reboot -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vps就会重启 然后再次连上ssh 就能享受Arch啦&lt;/p&gt;

&lt;p&gt;PS:
    1. 不保证一切顺利
    2. 这是一份测试过的vps的列表 &lt;a href=&#34;https://github.com/drizzt/vps2arch/wiki/Tested-VPS-Providers&#34;&gt;这里&lt;/a&gt; 我在CheapVZ的vps里也测试过了
    3. ipv6暂时还不能自动配置 有需要的请手动配置
    4. base-devel组不会自动安装 需要自己装
    5. 觉得棒的话 可以考虑捐助作者
    6. 没了&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>